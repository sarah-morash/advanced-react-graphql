{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\n\nvar paginationField = function paginationField() {\n  return {\n    keyArgs: false,\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      var skip = args.skip,\n          first = args.first;\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      var count = (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first);\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      });\n\n      if (items.length !== first) {\n        return false;\n      }\n\n      if (items.length) {\n        console.log(\"There are \".concat(items.length, \" in the cache! Gonna send them to Apollo\"));\n        return items;\n      }\n\n      return false;\n    },\n    merge: function merge() {}\n  };\n};\n\nexport default paginationField;","map":{"version":3,"sources":["/Users/smorash/Develop/Personal/smorefits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","console","log","merge"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAO;AAC7BC,IAAAA,OAAO,EAAE,KADoB;AAE7BC,IAAAA,IAAI,EAAE,gBAAoC;AAAA;;AAAA,UAAnCC,QAAmC,uEAAxB,EAAwB;;AAAA;AAAA,UAAlBC,IAAkB,QAAlBA,IAAkB;AAAA,UAAZC,KAAY,QAAZA,KAAY;;AAAA,UAChCC,IADgC,GAChBF,IADgB,CAChCE,IADgC;AAAA,UAC1BC,KAD0B,GAChBH,IADgB,CAC1BG,KAD0B;AAGxC,UAAMC,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACA,UAAMY,KAAK,4BAAGH,IAAI,CAACI,gBAAR,0DAAG,sBAAuBD,KAArC;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd;AAEA,UAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA1C,CAAd;;AACA,UAAIH,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B,eAAO,KAAP;AACD;;AAED,UAAIU,KAAK,CAACI,MAAV,EAAkB;AAChBC,QAAAA,OAAO,CAACC,GAAR,qBACeN,KAAK,CAACI,MADrB;AAGA,eAAOJ,KAAP;AACD;;AAED,aAAO,KAAP;AACD,KAvB4B;AAwB7BO,IAAAA,KAAK,EAAE,iBAAM,CAAE;AAxBc,GAAP;AAAA,CAAxB;;AA2BA,eAAexB,eAAf","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\n\nconst paginationField = () => ({\n  keyArgs: false,\n  read: (existing = [], { args, cache }) => {\n    const { skip, first } = args;\n\n    const data = cache.readQuery({ query: PAGINATION_QUERY });\n    const count = data._allProductsMeta?.count;\n    const page = skip / first + 1;\n    const pages = Math.ceil(count / first);\n\n    const items = existing.slice(skip, skip + first).filter((x) => x);\n    if (items.length !== first) {\n      return false;\n    }\n\n    if (items.length) {\n      console.log(\n        `There are ${items.length} in the cache! Gonna send them to Apollo`\n      );\n      return items;\n    }\n\n    return false;\n  },\n  merge: () => {},\n});\n\nexport default paginationField;\n"]},"metadata":{},"sourceType":"module"}