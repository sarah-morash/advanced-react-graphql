{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\n\nvar paginationField = function paginationField() {\n  return {\n    keyArgs: false,\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      var skip = args.skip,\n          first = args.first; // Read the number of items on the page from the cache\n\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first); // Check if we have existing items\n\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      }); // If there are items\n      // AND there aren't enough items to satisfy how many were requested\n      // AND we are on the last page\n      // THEN JUST SEND IT\n\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n\n      if (items.length !== first) {\n        // We don't have any items, we must go to the network to fetch them\n        return false;\n      } // If there are items, just return them from the cache, and we don't need to go to the network\n\n\n      if (items.length) {\n        console.log(\"There are \".concat(items.length, \" in the cache! Gonna send them to Apollo\"));\n        return items;\n      }\n\n      return false; // fallback to network\n    },\n    merge: function merge(existing, incoming, _ref2) {\n      var args = _ref2.args;\n      var skip = args.skip;\n      console.log(\"Merging items from the network \".concat(incoming.length));\n      console.log(incoming);\n      var merged = existing ? existing.slice(0) : [];\n\n      for (var i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      console.log(merged);\n      return merged;\n    }\n  };\n};\n\nexport default paginationField;","map":{"version":3,"sources":["/Users/smorash/Develop/Personal/smorefits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","console","log","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAO;AAC7BC,IAAAA,OAAO,EAAE,KADoB;AAE7BC,IAAAA,IAAI,EAAE,gBAAoC;AAAA;;AAAA,UAAnCC,QAAmC,uEAAxB,EAAwB;;AAAA;AAAA,UAAlBC,IAAkB,QAAlBA,IAAkB;AAAA,UAAZC,KAAY,QAAZA,KAAY;;AAAA,UAChCC,IADgC,GAChBF,IADgB,CAChCE,IADgC;AAAA,UAC1BC,KAD0B,GAChBH,IADgB,CAC1BG,KAD0B,EAGxC;;AACA,UAAMC,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACA,UAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CAPwC,CASxC;;AACA,UAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA1C,CAAd,CAVwC,CAYxC;AACA;AACA;AACA;;AACA,UAAIH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBd,KAAjC,IAA0CM,IAAI,KAAKC,KAAvD,EAA8D;AAC5D,eAAOG,KAAP;AACD;;AAED,UAAIA,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B;AACA,eAAO,KAAP;AACD,OAvBuC,CAyBxC;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AAChBC,QAAAA,OAAO,CAACC,GAAR,qBACeN,KAAK,CAACI,MADrB;AAGA,eAAOJ,KAAP;AACD;;AAED,aAAO,KAAP,CAjCwC,CAiC1B;AACf,KApC4B;AAqC7BO,IAAAA,KAAK,EAAE,eAACrB,QAAD,EAAWsB,QAAX,SAAkC;AAAA,UAAXrB,IAAW,SAAXA,IAAW;AAAA,UAC/BE,IAD+B,GACtBF,IADsB,CAC/BE,IAD+B;AAGvCgB,MAAAA,OAAO,CAACC,GAAR,0CAA8CE,QAAQ,CAACJ,MAAvD;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ;AAEA,UAAMC,MAAM,GAAGvB,QAAQ,GAAGA,QAAQ,CAACe,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AACA,WAAK,IAAIS,CAAC,GAAGrB,IAAb,EAAmBqB,CAAC,GAAGrB,IAAI,GAAGmB,QAAQ,CAACJ,MAAvC,EAA+C,EAAEM,CAAjD,EAAoD;AAClDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGrB,IAAL,CAApB;AACD;;AACDgB,MAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AACA,aAAOA,MAAP;AACD;AAjD4B,GAAP;AAAA,CAAxB;;AAoDA,eAAe1B,eAAf","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\n\nconst paginationField = () => ({\n  keyArgs: false,\n  read: (existing = [], { args, cache }) => {\n    const { skip, first } = args;\n\n    // Read the number of items on the page from the cache\n    const data = cache.readQuery({ query: PAGINATION_QUERY });\n    const count = data?._allProductsMeta?.count;\n    const page = skip / first + 1;\n    const pages = Math.ceil(count / first);\n\n    // Check if we have existing items\n    const items = existing.slice(skip, skip + first).filter((x) => x);\n\n    // If there are items\n    // AND there aren't enough items to satisfy how many were requested\n    // AND we are on the last page\n    // THEN JUST SEND IT\n    if (items.length && items.length !== first && page === pages) {\n      return items;\n    }\n\n    if (items.length !== first) {\n      // We don't have any items, we must go to the network to fetch them\n      return false;\n    }\n\n    // If there are items, just return them from the cache, and we don't need to go to the network\n    if (items.length) {\n      console.log(\n        `There are ${items.length} in the cache! Gonna send them to Apollo`\n      );\n      return items;\n    }\n\n    return false; // fallback to network\n  },\n  merge: (existing, incoming, { args }) => {\n    const { skip } = args;\n\n    console.log(`Merging items from the network ${incoming.length}`);\n    console.log(incoming);\n\n    const merged = existing ? existing.slice(0) : [];\n    for (let i = skip; i < skip + incoming.length; ++i) {\n      merged[i] = incoming[i - skip];\n    }\n    console.log(merged);\n    return merged;\n  },\n});\n\nexport default paginationField;\n"]},"metadata":{},"sourceType":"module"}