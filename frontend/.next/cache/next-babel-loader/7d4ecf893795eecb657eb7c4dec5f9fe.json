{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\n\nconst paginationField = () => ({\n  keyArgs: false,\n  read: (existing = [], {\n    args,\n    cache\n  }) => {\n    var _data$_allProductsMet;\n\n    const {\n      skip,\n      first\n    } = args; // Read the number of items on the page from the cache\n\n    const data = cache.readQuery({\n      query: PAGINATION_QUERY\n    });\n    const count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n    const page = skip / first + 1;\n    const pages = Math.ceil(count / first); // Check if we have existing items\n\n    const items = existing.slice(skip, skip + first).filter(x => x); // If there are items\n    // AND there aren't enough items to satisfy how many were requested\n    // AND we are on the last page\n    // THEN JUST SEND IT\n\n    if (items.length && items.length !== first && page === pages) {\n      return items;\n    }\n\n    if (items.length !== first) {\n      // We don't have any items, we must go to the network to fetch them\n      return false;\n    } // If there are items, just return them from the cache, and we don't need to go to the network\n\n\n    if (items.length) {\n      console.log(`There are ${items.length} in the cache! Gonna send them to Apollo`);\n      return items;\n    }\n\n    return false; // fallback to network\n  },\n  merge: (existing, incoming, {\n    args\n  }) => {\n    const {\n      skip\n    } = args;\n    console.log(`Merging items from the network ${incoming.length}`);\n    console.log(incoming);\n    const merged = existing ? existing.slice(0) : [];\n\n    for (let i = skip; i < skip + incoming.length; ++i) {\n      merged[i] = incoming[i - skip];\n    }\n\n    console.log(merged);\n    return merged;\n  }\n});\n\nexport default paginationField;","map":{"version":3,"sources":["/Users/smorash/Develop/Personal/smorefits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","console","log","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;;AAEA,MAAMC,eAAe,GAAG,OAAO;AAC7BC,EAAAA,OAAO,EAAE,KADoB;AAE7BC,EAAAA,IAAI,EAAE,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAhB,KAAoC;AAAA;;AACxC,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBH,IAAxB,CADwC,CAGxC;;AACA,UAAMI,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,MAAAA,KAAK,EAAEX;AAAT,KAAhB,CAAb;AACA,UAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CAPwC,CASxC;;AACA,UAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA2CC,CAAD,IAAOA,CAAjD,CAAd,CAVwC,CAYxC;AACA;AACA;AACA;;AACA,QAAIH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBd,KAAjC,IAA0CM,IAAI,KAAKC,KAAvD,EAA8D;AAC5D,aAAOG,KAAP;AACD;;AAED,QAAIA,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B;AACA,aAAO,KAAP;AACD,KAvBuC,CAyBxC;;;AACA,QAAIU,KAAK,CAACI,MAAV,EAAkB;AAChBC,MAAAA,OAAO,CAACC,GAAR,CACG,aAAYN,KAAK,CAACI,MAAO,0CAD5B;AAGA,aAAOJ,KAAP;AACD;;AAED,WAAO,KAAP,CAjCwC,CAiC1B;AACf,GApC4B;AAqC7BO,EAAAA,KAAK,EAAE,CAACrB,QAAD,EAAWsB,QAAX,EAAqB;AAAErB,IAAAA;AAAF,GAArB,KAAkC;AACvC,UAAM;AAAEE,MAAAA;AAAF,QAAWF,IAAjB;AAEAkB,IAAAA,OAAO,CAACC,GAAR,CAAa,kCAAiCE,QAAQ,CAACJ,MAAO,EAA9D;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ;AAEA,UAAMC,MAAM,GAAGvB,QAAQ,GAAGA,QAAQ,CAACe,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AACA,SAAK,IAAIS,CAAC,GAAGrB,IAAb,EAAmBqB,CAAC,GAAGrB,IAAI,GAAGmB,QAAQ,CAACJ,MAAvC,EAA+C,EAAEM,CAAjD,EAAoD;AAClDD,MAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGrB,IAAL,CAApB;AACD;;AACDgB,IAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AACA,WAAOA,MAAP;AACD;AAjD4B,CAAP,CAAxB;;AAoDA,eAAe1B,eAAf","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\n\nconst paginationField = () => ({\n  keyArgs: false,\n  read: (existing = [], { args, cache }) => {\n    const { skip, first } = args;\n\n    // Read the number of items on the page from the cache\n    const data = cache.readQuery({ query: PAGINATION_QUERY });\n    const count = data?._allProductsMeta?.count;\n    const page = skip / first + 1;\n    const pages = Math.ceil(count / first);\n\n    // Check if we have existing items\n    const items = existing.slice(skip, skip + first).filter((x) => x);\n\n    // If there are items\n    // AND there aren't enough items to satisfy how many were requested\n    // AND we are on the last page\n    // THEN JUST SEND IT\n    if (items.length && items.length !== first && page === pages) {\n      return items;\n    }\n\n    if (items.length !== first) {\n      // We don't have any items, we must go to the network to fetch them\n      return false;\n    }\n\n    // If there are items, just return them from the cache, and we don't need to go to the network\n    if (items.length) {\n      console.log(\n        `There are ${items.length} in the cache! Gonna send them to Apollo`\n      );\n      return items;\n    }\n\n    return false; // fallback to network\n  },\n  merge: (existing, incoming, { args }) => {\n    const { skip } = args;\n\n    console.log(`Merging items from the network ${incoming.length}`);\n    console.log(incoming);\n\n    const merged = existing ? existing.slice(0) : [];\n    for (let i = skip; i < skip + incoming.length; ++i) {\n      merged[i] = incoming[i - skip];\n    }\n    console.log(merged);\n    return merged;\n  },\n});\n\nexport default paginationField;\n"]},"metadata":{},"sourceType":"module"}